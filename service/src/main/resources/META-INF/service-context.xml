<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<!-- For times when you just need to invoke a method on a specific object -->
	<!-- <bean id="simpleJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
		<property name="targetObject" ref="myBean" /> <property name="targetMethod" 
		value="printMessage" /> </bean> -->
	<!-- Run the job every 2 seconds with initial delay of 1 second -->
	<!-- <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"> 
		<property name="jobDetail" ref="simpleJobDetail" /> <property name="startDelay" 
		value="1000" /> <property name="repeatInterval" value="2000" /> </bean> -->
	<!-- For testing simpleTrigger jobs -->
	<!-- <bean id="myBean" class="com.nv.agent.service.impl.TestSimpleTrigger"/> -->

	<bean id="availability.cache" class="com.nv.ynw.cache.availability.AvailabilityCacheManager">
		<property name="readDao">
			<ref bean="read.dao" />
		</property>
		<property name="cacheDao">
			<ref bean="cache.dao" />
		</property>
		<property name="objectMapper">
			<ref bean="object.mapper" />
		</property>
	</bean>

	<bean name="cache.manager.agent"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="com.nv.agent.service.impl.CacheManagerAgent" />
		<property name="jobDataMap">
			<map>
				<entry key="availabilityCache" value-ref="availability.cache" />
			</map>
		</property>
		<property name="durability" value="true" />
	</bean>

	<!-- Fire at 12.05 AM everyday -->
	<bean id="cache.manager.agent.cronTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="cache.manager.agent" />
		<property name="cronExpression" value="0 5 12 * * ?" />
	</bean>


	<bean name="login.history.purge.agent"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass"
			value="com.nv.agent.service.impl.LoginHistoryPurgeAgent" />
		<property name="jobDataMap">
			<map>
				<entry key="readDao" value-ref="read.dao" />
				<entry key="baseDao" value-ref="base.dao" />
			</map>
		</property>
		<property name="durability" value="true" />
	</bean>

	<!-- Fire at 4.30 PM on 1th of every month -->
	<bean id="login.history.purge.agent.cronTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="login.history.purge.agent" />
		<property name="cronExpression" value="0 30 16 1 * ?" />
	</bean>

	<bean name="alert.purge.agent"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="com.nv.agent.service.impl.AlertPurgeAgent" />
		<property name="jobDataMap">
			<map>
				<entry key="readDao" value-ref="read.dao" />
				<entry key="baseDao" value-ref="base.dao" />
			</map>
		</property>
		<property name="durability" value="true" />
	</bean>

	<!-- Fire at 2.56 PM everyday -->
	<bean id="alert.purge.agent.cronTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="alert.purge.agent" />
		<property name="cronExpression" value="0 0 10 * * ?" />
	</bean>


	<!-- Scheduler factory bean to glue together jobDetails and triggers to 
		Configure Quartz Scheduler -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobDetails">
			<list>
				<!-- <ref bean="simpleJobDetail" /> -->
				<ref bean="cache.manager.agent" />
				<ref bean="login.history.purge.agent" />
				<ref bean="alert.purge.agent" />
			</list>
		</property>

		<property name="triggers">
			<list>
				<!-- <ref bean="simpleTrigger" /> -->
				<ref bean="cache.manager.agent.cronTrigger" />
				<ref bean="login.history.purge.agent.cronTrigger" />
				<ref bean="alert.purge.agent.cronTrigger" />
			</list>
		</property>
	</bean>


	<!-- <bean id="availability.cache.manager" class="com.nv.agent.service.impl.AvailabilityCacheManager"> 
		<property name="readDao"> <ref bean="read.dao" /> </property> <property name="cacheDao"> 
		<ref bean="cache.dao" /> </property> <property name="objectMapper"> <ref 
		bean="object.mapper" /> </property> </bean> -->

	<bean class="com.nv.platform.json.JSONMapper" id="object.mapper" />


	<bean id="sendMsg" class="com.nv.platform.sendmsg.email.SendMessageImpl">
		<property name="templates">
			<list>
				<ref bean="reportHealth.template" />
			</list>
		</property>
		<property name="accessKey">
			<value>${amazon.access.key}</value>
		</property>
		<property name="secretKey">
			<value>${amazon.secret.key}</value>
		</property>
		<property name="mailFrom">
			<value>${mailFrom}</value>
		</property>
	</bean>
	<bean id="reportHealth.template" class="com.nv.ynw.email.HealthEmailTemplate">
		<property name="s3Url">
			<value>${s3Url}</value>
		</property>
	</bean>
	
	<bean id="email.processor" class="com.nv.agent.service.event.processors.EmailEventProcessor">
		<constructor-arg index="0" ref="sendMsg" />
		<constructor-arg index="1" ref="base.dao" />
	</bean>
	<bean id="agent.event.handler" class="com.nv.agent.service.event.impl.AgentEventHandler">
		<constructor-arg index="0">
			<map key-type="com.nv.platform.event.ActionType" value-type="com.nv.agent.service.event.EventProcessor">
				<entry key="SEND_MAIL" value-ref="email.processor"></entry>
			</map>
		</constructor-arg>
		<constructor-arg index="1" ref="read.dao" />
		<constructor-arg index="2" ref="object.mapper" />
		<constructor-arg index="3" ref="base.dao" />
	</bean>

	<bean id="agent.endpoint" class="com.nv.ynw.agent.rs.AgentEndpoint">
		<constructor-arg index="0" ref="agent.event.handler" />
	</bean>

	<bean id="agent.config" class="com.nv.ynw.agent.rs.ServerEndpointExporter" />

	<bean id="server.endpoint.confg" class="com.nv.ynw.agent.rs.ServerEndpointRegistration">
		<constructor-arg index="0" value="/server" />
		<constructor-arg index="1" ref="agent.endpoint" />
	</bean>

</beans>